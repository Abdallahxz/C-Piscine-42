ft_arg_to_tab.c
هذه الدوال تستخدم بشكل أساسي لتحويل سلسلة الأرقام الممرة كوسيط إلى جدول من الأرقام
 الصحيحة للاستخدام اللاحق في البرنامج الرئيسي.

#include "ft_header.h":
يقوم بتضمين محتويات ملف الرأس "ft_header.h" في هذا الملف. يفيد هذا في استخدام التعريفات والدوال الموجودة في "ft_header.h" دون الحاجة إلى إعادة كتابتها هنا.

int *ft_arg_to_tab(char *str, int argc) { ... }:
هذه الوظيفة تأخذ سلسلة محارف (char *str) وعددًا صحيحًا (int argc) كمدخلات. تقوم بتحويل الأرقام الموجودة في السلسلة إلى مصفوفة من الأرقام الصحيحة وتُرجع المصفوفة كنتيجة. على سبيل المثال، إذا كانت السلسلة "12345 6789" و argc يساوي 9، فستكون القيم المستخرجة هي {1, 2, 3, 4, 5, 6, 7, 8, 9}.

عint i; int j; int *tab; int error;: يتم هنا تعريف متغيرات من نوع الصحيح (int)، حيث يُستخدم كل من i و j كمتغيرات للتكرار، tab لتخزين المصفوفة الناتجة، و error لتتبع أي خطأ قد يحدث.

عi = 0; j = 0;: يتم تعيين قيمة العدادات i و j إلى الصفر في البداية. هذه العدادات تستخدم للتحكم في الحلقات التكرارية.

عif (ft_is_num_space(str)) return (NULL);: تقوم هذه الشرطية بفحص النص الممرر str للدالة ft_is_num_space()، والتي من المحتمل أن تقوم بالتحقق مما إذا كانت السلسلة تحتوي على أحرف أو أرقام فقط، أو إذا كانت تحتوي على مسافات فقط. إذا كان الشرط يتحقق، فإن الدالة تعيد قيمة NULL، مما يعني أن هناك خطأ.

عtab = (int *)malloc(argc * sizeof(int));: تُخصص ذاكرة باستخدام الدالة malloc() لتخزين المصفوفة tab، حيث يكون حجم المصفوفة يساوي argc (عدد الوسائط) مضروبًا في حجم النوع int.

عif (!tab) return (NULL);: يتحقق هذا الشرط من نجاح عملية تخصيص الذاكرة. إذا فشلت، فإن الدالة تعيد قيمة NULL، مما يعني أن هناك خطأ.

عwhile (str[i]): تفحص هذه الحلقة النص str حتى نهايته.

عif (str[i] <= '9' && str[i] >= '0' && j < argc): تتحقق هذه الشرطية من أن الحرف الحالي في النص يمثل رقمًا (من '0' إلى '9') وأن j أقل من argc (عدد الوسائط).

عtab[j] = ft_char_to_int(str[i]);: إذا تحقق الشرط، يتم استخدام الدالة ft_char_to_int() لتحويل الحرف إلى رقم صحيح، ويتم تخزينه في المصفوفة tab في الفهرس j.

عj++;: يتم زيادة قيمة j بعد كل تخزين في المصفوفة.

عi++;: يتم زيادة قيمة i للانتقال إلى الحرف التالي في النص.

 عerror = ft_check_tab(tab, argc);: يتم استدعاء دالة ft_check_tab() وتمرير المصفوفة tab وعدد الوسائط argc كمدخلات. هذه الدالة مسؤولة عن التحقق من صحة المصفوفة المحولة وتصحيح أي خطأ إذا وجد.

عif (error) return (NULL);: يتم فحص قيمة المتغير error للتأكد مما إذا كان هناك خطأ في المصفوفة أم لا. إذا كان هناك خطأ (أي error ليست صفر)، يتم إرجاع قيمة NULL للإشارة إلى أن هناك خطأ.

عreturn (tab);: إذا لم يكن هناك خطأ في المصفوفة، يتم إرجاع المصفوفة tab بعد التحقق والتأكد من صحتها.

عint ft_check_tab(int *tab, int size): هذه هي توقيع الدالة. تأخذ مصفوفة من الأعداد الصحيحة tab وحجمها size.

عint max_value; int i;: تعريف متغيرات محلية للدالة، max_value لتخزين أقصى قيمة مسموح بها للعنصر، و i للاستخدام كمتغير للتكرار.

عi = 0; max_value = size / 4;: يتم تعيين قيمة i إلى الصفر، ويتم حساب max_value كنصف قيمة size (الحجم)، وهذا يفترض أن العناصر تمثل أرباع الحجم الإجمالي المعطى.

عwhile (i < size && max_value >= 4): هذه الحلقة تقوم بفحص العناصر في المصفوفة وتحديد ما إذا كانت القيم تتناسب مع الشروط المحددة. الحلقة تستمر ما دامت قيمة i أقل من size وقيمة max_value أكبر من أو تساوي 4.

عif (tab[i] > max_value || tab[i] <= 0): يتم فحص قيمة العنصر الحالي tab[i]، إذا كانت أكبر من max_value أو أقل من أو تساوي صفر، فإن الشرط يُرجع 1، مما يعني وجود خطأ.

عreturn (1);: في حالة وجود خطأ في القيمة، يتم إرجاع قيمة 1 للإشارة إلى وجود خطأ.

عi++;: يتم زيادة قيمة المتغير i للانتقال إلى العنصر التالي في المصفوفة.

عreturn (0);: إذا لم يتم العثور على أي خطأ في القيم، يتم إرجاع قيمة 0 للإشارة إلى عدم وجود أي مشكلات.

